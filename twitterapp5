import json
import pandas as pd
import matplotlib.pyplot as plt

tweets_data_path = '/Users/kuttush/Desktop/Spongebob/Thinkful/DataScience/DS_Project/twitter_data.txt'

tweets_data = []
tweets_file = open(tweets_data_path, "r")
for line in tweets_file:
    try:
        tweet = json.loads(line)
        tweets_data.append(tweet)
    except:
        continue


print (len(tweets_data))

#text column contains the tweet, lang column contains the language in which the tweet was written, and country the country from which the tweet was sent
tweets = pd.DataFrame()
tweets['text'] = map(lambda tweet: tweet['text'], tweets_data)
tweets['lang'] = map(lambda tweet: tweet['lang'], tweets_data)
tweets['country'] = map(lambda tweet: tweet['place']['country'] if tweet['place'] != None else None, tweets_data)
#tweets['country'] = map(lambda tweet: tweet['country'] if tweet['country'] != None else None, tweets_data)
#text column contains the tweet, lang column contains the language in which the tweet was written, and country the country from which the tweet was sent

#The first one describing the Top 5 languages in which the tweets were written, and the second the Top 5 countries from which the tweets were sent
tweets_by_lang = tweets['lang'].value_counts()
fig, ax = plt.subplots()
ax.tick_params(axis='x', labelsize=15)
ax.tick_params(axis='y', labelsize=10)
ax.set_xlabel('Languages', fontsize=15)
ax.set_ylabel('Number of tweets' , fontsize=15)
ax.set_title('Top 5 languages', fontsize=15, fontweight='bold')
tweets_by_lang[:5].plot(ax=ax, kind='bar', color='red')

tweets_by_country = tweets['country'].value_counts()
fig, ax = plt.subplots()
ax.tick_params(axis='x', labelsize=15)
ax.tick_params(axis='y', labelsize=10)
ax.set_xlabel('Countries', fontsize=15)
ax.set_ylabel('Number of tweets' , fontsize=15)
ax.set_title('Top 5 countries', fontsize=15, fontweight='bold')
tweets_by_country[:5].plot(ax=ax, kind='bar', color='blue')
#The first one describing the Top 5 languages in which the tweets were written, and the second the Top 5 countries from which the tweets were sent

import re
def word_in_text(word, text):
    word = word.lower()
    text = text.lower()
    match = re.search(word, text)
    if match:
        return True
    return False

#add three columns for each of the query and count each of the query. 
tweets['climate'] = tweets['text'].apply(lambda tweet: word_in_text('climate', tweet))
tweets['environment'] = tweets['text'].apply(lambda tweet: word_in_text('environment', tweet))
tweets['global warming'] = tweets['text'].apply(lambda tweet: word_in_text('global warming', tweet))
print (tweets['climate'].value_counts()[True])
print (tweets['environment'].value_counts()[True])
print (tweets['global warming'].value_counts()[True])
#add three columns for each of the query and count each of the query.

#a comparision chart for the queries
queries = ['climate', 'environment', 'global warming']
tweets_by_queries = [tweets['climate'].value_counts()[True], tweets['environment'].value_counts()[True], tweets['global warming'].value_counts()[True]]
x_pos = list(range(len(queries)))
width = 0.8
fig, ax = plt.subplots()
plt.bar(x_pos, tweets_by_queries, width, alpha=1, color='g')
ax.set_ylabel('Number of tweets', fontsize=15)
ax.set_title('Ranking: climate vs. environment vs. global warming', fontsize=10, fontweight='bold')
ax.set_xticks([p + 0.4 * width for p in x_pos])
ax.set_xticklabels(queries)
plt.grid()
#a comparision chart for the queries


